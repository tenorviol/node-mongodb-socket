var WireReader = require('../lib/mongodb/WireReader');
var WireWriter = require('../lib/mongodb/WireWriter');
var mongodb = require('mongodb');
var ObjectID = require('mongodb').BSONPure.ObjectID;

var tests = [

  {
    name : 'is master?',
    buffer : new Buffer([
      0x3a, 0, 0, 0,
      0, 0, 0, 0,
      0, 0, 0, 0,
      0xd4, 0x07, 0, 0,
      0, 0, 0, 0,
      0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x24, 0x63, 0x6d, 0x64, 0,
      0, 0, 0, 0,
      0xff, 0xff, 0xff, 0xff,
      0x13, 0, 0, 0,
      0x10, 0x69, 0x73, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0, 0x01, 0, 0, 0, 0
    ]),
    message : { requestID: 0,
      responseTo: 0,
      opCode: 2004,
      flags: 0,
      collection: 'admin.$cmd',
      numberToSkip: 0,
      numberToReturn: -1,
      query: { ismaster: 1 } }
  },
  
  // reply to above
  {
    name : 'is master',
    buffer : new Buffer([
      0x53, 0, 0, 0,
      0x9c, 0xaf, 0, 0xf5,
      0, 0, 0, 0,
      0x01, 0, 0, 0,
      0x08, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0,
      0x01, 0, 0, 0,
      
      0x2f, 0x00, 0x00,
      0x00, 0x08, 0x69, 0x73, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x00, 0x01, 0x10, 0x6d, 0x61, 0x78, 0x42, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0x6f, 0x6b, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00
/*    
      original bson doc, length=0x57 (maybe this bson parser is different from mongod's)
      0x33, 0, 0, 0,
      0x08, 0x69, 0x73, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0, 0x01, 0x10, 0x6d, 0x61, 0x78, 0x42, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0, 0, 0, 0, 0x01, 0x01, 0x6f, 0x6b, 0, 0, 0, 0, 0, 0, 0, 0xf0, 0x3f, 0
*/    ]),
    message : {
      requestID: -184504420,
      responseTo: 0,
      opCode: 1,
      flags: 8,
      cursorID: 0,
      startingFrom: 0,
      numberReturned: 1,
      documents: [ { ismaster: true, maxBsonObjectSize: 16777216, ok: 1 } ]
    }
  },
  
  {
    name : 'insert',
    buffer : new Buffer([
      0x41, 0, 0, 0,
      0x01, 0, 0, 0,
      0, 0, 0, 0,
      0xd2, 0x07, 0, 0,
      0, 0, 0, 0,
      0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0,
      0x23, 0, 0, 0,
      0x07, 0x5f, 0x69, 0x64, 0, 0x4e, 0x11, 0xf6, 0xa8, 0xde, 0xa5, 0x25, 0x2c, 0x77, 0, 0, 0, 0x02, 0x66, 0x6f, 0x6f, 0, 0x04, 0, 0, 0, 0x62, 0x61, 0x72, 0, 0
    ]),
    message : {
      requestID: 1,
      responseTo: 0,
      opCode: 2002,
      flags: 0,
      collection: 'test.test',
      documents: [ { _id: new ObjectID('4e11f6a8dea5252c77000000'), foo: 'bar' } ]
    }
  },
  
  {
    name : 'update',
    buffer : new Buffer([0x48, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd1, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x02, 0x66, 0x6f, 0x6f, 0x00, 0x04, 0x00, 0x00, 0x00, 0x62, 0x61, 0x72, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x02, 0x66, 0x6f, 0x6f, 0x00, 0x06, 0x00, 0x00, 0x00, 0x66, 0x75, 0x62, 0x61, 0x72, 0x00, 0x00]),
    message : {
      requestID: 2,
      responseTo: 0,
      opCode: 2001,
      collection: 'test.test',
      flags: 0,
      selector: { foo: 'bar' },
      update: { foo: 'fubar' }
    }
  },
  
  {
    name : 'find',
    buffer : new Buffer([0x2b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00]),
    message : {
      requestID: 3,
      responseTo: 0,
      opCode: 2004,
      flags: 0,
      collection: 'test.test',
      numberToSkip: 0,
      numberToReturn: 0,
      query: {}
    }
  },
  
  {
    name : 'find response',
    buffer : new Buffer([0xf8, 0x00, 0x00, 0x00, 0xa0, 0xaf, 0x00, 0xf5, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x07, 0x5f, 0x69, 0x64, 0x00, 0x4e, 0x11, 0xf5, 0x5a, 0xde, 0xa5, 0x25, 0x17, 0x77, 0x00, 0x00, 0x00, 0x02, 0x66, 0x6f, 0x6f, 0x00, 0x04, 0x00, 0x00, 0x00, 0x62, 0x61, 0x72, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x07, 0x5f, 0x69, 0x64, 0x00, 0x4e, 0x11, 0xf6, 0xa8, 0xde, 0xa5, 0x25, 0x2c, 0x77, 0x00, 0x00, 0x00, 0x02, 0x66, 0x6f, 0x6f, 0x00, 0x04, 0x00, 0x00, 0x00, 0x62, 0x61, 0x72, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x07, 0x5f, 0x69, 0x64, 0x00, 0x4e, 0x12, 0xa7, 0x9a, 0xde, 0xa5, 0x25, 0x2f, 0x79, 0x00, 0x00, 0x00, 0x02, 0x66, 0x6f, 0x6f, 0x00, 0x04, 0x00, 0x00, 0x00, 0x62, 0x61, 0x72, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x07, 0x5f, 0x69, 0x64, 0x00, 0x4e, 0x12, 0xa7, 0xa4, 0xde, 0xa5, 0x25, 0x33, 0x79, 0x00, 0x00, 0x00, 0x02, 0x66, 0x6f, 0x6f, 0x00, 0x04, 0x00, 0x00, 0x00, 0x62, 0x61, 0x72, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x07, 0x5f, 0x69, 0x64, 0x00, 0x4e, 0x12, 0xab, 0xd2, 0xde, 0xa5, 0x25, 0xf2, 0x79, 0x00, 0x00, 0x00, 0x02, 0x66, 0x6f, 0x6f, 0x00, 0x04, 0x00, 0x00, 0x00, 0x62, 0x61, 0x72, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x07, 0x5f, 0x69, 0x64, 0x00, 0x4e, 0x11, 0xf4, 0xa6, 0xde, 0xa5, 0x25, 0x01, 0x77, 0x00, 0x00, 0x00, 0x02, 0x66, 0x6f, 0x6f, 0x00, 0x06, 0x00, 0x00, 0x00, 0x66, 0x75, 0x62, 0x61, 0x72, 0x00, 0x00]),
    message : {
      requestID: -184504416,
      responseTo: 3,
      opCode: 1,
      flags: 8,
      cursorID: 0,
      startingFrom: 0,
      numberReturned: 6,
      documents: [
        { _id: new ObjectID('4e11f55adea5251777000000'), foo: 'bar' },
        { _id: new ObjectID('4e11f6a8dea5252c77000000'), foo: 'bar' },
        { _id: new ObjectID('4e12a79adea5252f79000000'), foo: 'bar' },
        { _id: new ObjectID('4e12a7a4dea5253379000000'), foo: 'bar' },
        { _id: new ObjectID('4e12abd2dea525f279000000'), foo: 'bar' },
        { _id: new ObjectID('4e11f4a6dea5250177000000'), foo: 'fubar' }
      ]
    }
  },
  
  {
    name : 'count',
    buffer : new Buffer([0x3b, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x24, 0x63, 0x6d, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x15, 0x00, 0x00, 0x00, 0x02, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x00, 0x05, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x00, 0x00]),
    message : {
      requestID: 4,
      responseTo: 0,
      opCode: 2004,
      flags: 0,
      collection: 'test.$cmd',
      numberToSkip: 0,
      numberToReturn: -1,
      query: { count: 'test' }
    }
  },
  
  {
    name : 'count response',
    buffer : new Buffer([0x40, 0x00, 0x00, 0x00, 0xa1, 0xaf, 0x00, 0xf5, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x01, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x40, 0x01, 0x6f, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x00]),
    message : {
      requestID: -184504415,
      responseTo: 4,
      opCode: 1,
      flags: 8,
      cursorID: 0,
      startingFrom: 0,
      numberReturned: 1,
      documents: [ { n: 6, ok: 1 } ]
    }
  },
  
  {
    name : 'drop test',
    buffer : new Buffer([0x27, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd6, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00]),
    message : {
      requestID: 5,
      responseTo: 0,
      opCode: 2006,
      collection: 'test.test',
      flags: 0,
      selector: {}
    }
  },
  
  {
    name : 'query drop result',
    buffer : new Buffer([0x3a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x24, 0x63, 0x6d, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x14, 0x00, 0x00, 0x00, 0x02, 0x64, 0x72, 0x6f, 0x70, 0x00, 0x05, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x00, 0x00]),
    message : {
      requestID: 6,
      responseTo: 0,
      opCode: 2004,
      flags: 0,
      collection: 'test.$cmd',
      numberToSkip: 0,
      numberToReturn: -1,
      query: { drop: 'test' }
    }
  },
  
  {
    name : 'drop result',
    buffer : new Buffer([0x84, 0x00, 0x00, 0x00, 0xa2, 0xaf, 0x00, 0xf5, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x01, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x57, 0x61, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x02, 0x6d, 0x73, 0x67, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x02, 0x6e, 0x73, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x00, 0x01, 0x6f, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x00]),
    message : {
      requestID: -184504414,
      responseTo: 6,
      opCode: 1,
      flags: 8,
      cursorID: 0,
      startingFrom: 0,
      numberReturned: 1,
      documents: [
        { nIndexesWas: 1,
           msg: 'indexes dropped for collection',
           ns: 'test.test',
           ok: 1 }
      ] 
    }
  }
  
].forEach(function (test) {
  
  exports[test.name + ', read'] = function (assert) {
    var reader = new WireReader();
    reader.on('message', function (message, buffer) {
      assert.deepEqual(test.message, message);
      assert.equal(test.buffer.toString('binary'), buffer.toString('binary'));
      assert.done();
    });
    
    reader.write(test.buffer);
  };
  
  exports[test.name + ', read double'] = function (assert) {
    var reader = new WireReader();
    var count = 0;
    reader.on('message', function (message, buffer) {
      count++;
      assert.deepEqual(test.message, message);
      assert.equal(test.buffer.toString('binary'), buffer.toString('binary'));
    });
    
    var double_buffer = new Buffer(test.buffer.length * 2);
    test.buffer.copy(double_buffer);
    test.buffer.copy(double_buffer, test.buffer.length);
    reader.write(double_buffer);
    setTimeout(function () {
      assert.equal(2, count);
      assert.done();
    }, 10);
  };
  
  exports[test.name + ', read fragmented'] = function (assert) {
    var reader = new WireReader();
    reader.on('message', function (message, buffer) {
      assert.deepEqual(test.message, message);
      assert.equal(test.buffer.toString('binary'), buffer.toString('binary'));
      assert.done();
    });
    
    var one_byte = new Buffer(1);
    for (var i = 0; i < test.buffer.length; i++) {
      one_byte[0] = test.buffer[i];
      reader.write(one_byte);
    }
  };
  
  exports[test.name + ', write'] = function (assert) {
    var writer = new WireWriter();
    writer.on('data', function (buffer) {
      var reader = new WireReader();
      reader.on('message', function (message) {
        assert.deepEqual(test.message, message);
        assert.done();
      });
      reader.write(buffer);
    });
    writer.write(test.message);
  };
  
});
